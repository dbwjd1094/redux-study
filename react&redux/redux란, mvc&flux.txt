redux : react에서 component와 state 관리를 할 때 사용되는 라이브러리
flux 는 일종의 아이디어, 추상적인 개념
그 추상적인 개념을 구현한 것이 redux
mvc 디자인 패턴 : 어떤 action이 입력되면 controller는 액션을 받아서 모델이 지니고 있는 데이터를 조회하거나 업데이트 할 수 있고 그 변화는 view에 반영된다. 
 view에서 모델 데이터에 접근하여 업데이트할 수 있다. model과 view는 서로에게 영향을 끼칠 수 있다. 
action -> controller -> model <-> view

mvc는 앱의 규모가 점점 더 커질수록 점점 복잡해지고
작동하기 어려움
ex. 페이스북에서 mvc -> flux로 갈아탐
 

flux :
system -> dispatcher -> store -> view
시스템에서 어떠한 액션을 받았을때 디스패쳐가 받은 액션을 통제하여 스토어에 있는 데이터를 업데이트 한다.  변동된 데이터가 있으면 view에 리렌더링을한다.
view에선 store에 직접 접근을 하지 않고 view에서 디스패쳐로 action을 보냅니다. 그리고 디스패쳐에서는 작업이 중첩되지 않도록 해준다.
디스패쳐는 기본적으로 콜백이 등록되어 있는 곳이다. 이것은 마치 전화 교환대에서 교환원이 일하는 것과 같다. ex. 전화 교환대에서는 등록된 모든 전화들과의 연결이 가능하다. 
디스패쳐는 액션을 보낼 필요가 있는 모든 스토어를 가지고 있고 액션 생성자로부터 액션이 넘어오면 여러 스토에어 액션을 보낸다. 
스토어는 애플리케이션 내의 모든 상태와 그와 관련된 로직을 가지고 있다.
뷰는 상태의 상태를 가져오고 유저에게 보여주고 입력받을 화면을 렌더링하는 역할을 맡는다. 뷰는 발표자와 같다. 애플리케이션 내부에 대해서는 아는 것이 없지만, 받은 데이터를 처리해서 사람들이 이해할 수 있는 포맷(HTML)으로 어떻게 바꾸는지 알고 있다.

준비과정
: 애플리케이션이 초기화할때 딱 한번 준비과정을 가진다. 
1. 스토어는 디스패쳐에 액션이 들어오면 알려달라고 말해둔다. 
2. 컨트롤러 뷰는 스토어에게 최신 상태를 묻는다.
3. 스토어가 컨트롤러 뷰에게 상태를 주면 렌더링하기 위해 모든 자식 뷰에게 상태를 넘겨준다. 
4. 컨트롤러 뷰는 스토어에게 상태가 바뀔 때 알려달라고 다시 부탁한다. 

데이터 흐름 
: 준비과정이 끝나면 애플리케이션은 유저 입력을 위한 준비가 완료된다. 
사용자의 입력으로 인한 액션이 생겼을 경우
1. 뷰는 액션 생성자에게 액션을 준비하라고 말한다. 
2. 액션 생성자는 액션을 포맷에 맞게 만들어서 디스패쳐에 넘겨준다. 
3. 디스패쳐는 들어온 액션의 순서에 따라 알맞은 스토어로 보낸다. 각 스토어는 모든 액션을 받게 되지만 필요한 액션만을 골라서 상태를 필요에 맞게 변경한다. 
4. 상태 변경이 완료되면 스토어는 자신을 구독하고 있는 컨트롤러 뷰에게 그 사실을 알려준다.
5. 연락을 받은 컨트롤러 뷰는 스토어에게 변경된 상태를 요청한다.
6. 스토어가 새로운 상태를 넘겨주면, 컨트롤러 뷰는 자신 아래의 모든 뷰에게 새로운 상태에 맞게 렌더링하라고 알린다.