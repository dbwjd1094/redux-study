redux는 flux 아키텍처를 좀 더 편하게 사용할 수 있게 해주는 라이브러리, flux의 구현체

3가지 원칙
1. single source of true : 진실은 하나의 근원 
- 애플리케이션의 state를 위해 단 한개의 store를 사용한다. (flux는 여러개의 store를 사용한다.)
2. state is read-only : state는 읽기 전용
- 애플리케이션에서 store의 state를 직접 변경할 수 없다. state를 변경하기 위해선 무조건 action이 dispatch되어야 한다. 
3. changes are made with pure Functions 
- action 객체를 처리하는 함수를 reducer라고 부른다.
- reducer는 정보를 받아서 상태를 어떻게 업데이트 할지 정의한다.
- reducer는 '순수 함수'로 작성되어야 한다
(즉, 네트워크 및 데이터베이스 접근 x, 인수 변경 x, 같은 인수로 실행된 함수는 언제나 같은 결과를 반환, '순수하지 않은' api(Date.now()) 사용 불가)

action creator(액션 생성자)
: redux는 flux에서 액션 생성자를 그대로 가져왔다. 애플리케이션 상태를 바꾸고 싶다면 항상 액션을 보내야만 한다. 이것이 상태를 바꾸기 위한 유일한 방법
store(스토어)
: 좀 더 일을 다른 곳에 위임하는 경향이 있으며, 그렇게 해야만 한다. 단 하나의 스토어만을 가진다. 상태 트리(state tree) 전체를 유지하는 책임을 진다. 액션이 들어왔을 때 어떤 상태변화가 필요한지에 대한 일은 위임하며, 그 일은 리듀서(reducer)가 맡는다.  디스패쳐의 일을 스토어가 받았기 때문에 디스패쳐는 없다.
the reducers(리듀서)
: 스토어는 액션이 어떤 상태 변화를 만드는지 알 필요가 있을 때 리듀서에게 묻는다.  루트 리듀서는 애플리케이션 상태 객체의 키를 기준 삼아 상태를 조각조각 나누다. 이렇게 나누어진 상태 조각은 그 조각을 처리할 줄 아는 리듀서로 넘겨준다.
리듀서는 마치 서류 복사에 지나치게 열성적인 사무실 직원들과 같다. 일을 망치는 것에 아주 민감하므로 넘겨받은 예전 상태는 변경하지 않는다. 대신 새로운 복사본을 만든 후 거기에다가 모든 변경사항을 적용한다.
view(뷰)-영민한 컴포넌트와 우직한 컴포넌트(smart and dumb components)
: smart 컴포넌트는 관리자처럼 행동하는데 액션 처리를 책임진다. smart 컴포넌트 밑의 dumb 컴포넌트가 액션을 보낼 필요가 있을때, smart 컴포넌트는 props를 통해서 dumb 컴포넌트에 함수를 보낸다. dumb 컴포넌트는 받은 함수를 콜백으로써 단순히 호출만 한다. 
smart 컴포넌트는 자기 자신의 css style을 가지고 있지 않고 자기 자신의 dom을 거의 가지고 있지 않다. 대신 dom 요소들을 관리하는 dumb 컴포넌트를 관리한다. 
dumb 컴포넌트는 액션에 직접 의존성을 가지지는 않는다. 이는 모든 액션을 props를 통해서 넘겨 받기 때문이다. dumb 컴포넌트는 다른 로직을 가진 다른 애플리케이션에서 재사용될 수 있다는 뜻이다. 또한 어느 정도 보기좋게 할 만큼의 css style도 포함하고 있다. 
the view layer binding(뷰 레이어 바인딩)
:스토어를 뷰에 연결시킬때
the root component(루트 컴포넌트)
:마치 ceo와 같다. 이는 단지 컴포넌트 계층 구조에서 가장 위에 위치하는 컴포넌트일 뿐이지만 추가로 책임져야할 것이 존재한다. 모든 팀이 일을 하도록 하는 임무를 가진다. 스토어를 생성하고 무슨 리듀서를 사용할지 알려주며 뷰 레이어 바인딩과 뷰를 불러온다. 하지만 류트 컴포넌트는 애플리케이션을 초기화한 뒤로는 거의 하는 일이 없다. 

준비 : 애플리케이션의 여러 부분이 모두 함께 연결된다.
1. 스토어를 준비한다. 루트 컴포넌트는 createStore()를 이용해서 스토어를 생성하고 무슨 리듀서를 사용할지 알려준다. 루트 컴포넌트는 이미 필요한 모든 리듀서를 가지고 있다. combineReducers()를 이용해서 다수의 리듀서를 하나로 묶는다. 
2. 스토어와 컴포넌트 사이의 커뮤니케이션을 준비한다.  루트 컴포넌트는 공급 컴포넌트로 서브 컴포넌트를 감싸고 스토어와 공급 컴포넌트 사이를 연결한다. 공급 컴포넌트는 기본적으로 컴포넌트를 업데이트하기 위한 네트워크를 생성하고 smart 컴포넌트는 connect()로 네트워크에 연결한다.
3. 액션콜백을 준비한다. dumb 컴포넌트가 액션과 쉽게 일할 수 있게 하기 위해 smart 컴포넌트는 bindActionCreate()로 액션 콜백을 준비한다. 

데이터 흐름 : 사용자가 애플리케이션을 사용할 준비가 되었고 액션을 하나 보내고 데이터 흐름을 확인해보자
1. 뷰가 액션을 요청한다. 액션 생성자가 포맷을 변환한 뒤 돌려준다. 
2. bindActionCreator()가 준비과정에서 사용되었으며 자동으로 액션이 보내진다. 그게 아니라면 뷰가 직접 액션을 보낸다. 
3. 스토어가 액션을 받는다. 현재 애플리케이션 상태 트리와 액션을 루트 리듀서에게 보낸다. 
4. 루트 리듀서는 상태 트리를 조각으로 나눈 뒤 알맞은 서브 리듀서로 상태 조각들을 넘겨준다.
5. 서브 리듀서는 받은 상태 조각을 복사한 뒤, 그 복사본을 변경한다. 루트 리듀서에게 변경된 복사본을 돌려준다.
6. 모든 서브 리듀서가 변경 된 상태 조각들을 돌려주면, 루트 리듀서는 이 상태 조각들을 한데 모아 상태 트리로 만든 뒤 스토어로 돌려준다. 스토어는 새로운 상태 트리를 옛날 상태 트리와 바꾼다.
7. 스토어는 뷰 레이어 바인딩에게 애플리케이션 상태가 변경되었다는 것을 알린다.
8. 뷰 레이어 바인딩은 스토어에게 새로운 상태를 보내달라고 요청하고
9. 뷰 레이어 바인딩은 뷰에게 화면을 업데이트하도록 요청한다. 

